// Dados dos personagens
const characters = [
    {
        id: 1,
        name: "NEO WARRIOR",
        emoji: "ü§ñ",
        description: "Guerreiro do futuro com armadura nanotecnol√≥gica e armas de energia. Especialista em combate corpo a corpo com for√ßa sobre-humana.",
        stats: { attack: 95, defense: 85, speed: 90 },
        abilities: ["L√¢mina de Energia", "Campo de For√ßa", "Salto Qu√¢ntico"]
    },
    {
        id: 2,
        name: "CYBER NINJA",
        emoji: "ü•∑",
        description: "Mestre das sombras digitais com t√©cnicas de combate furtivo. Utiliza tecnologia avan√ßada para se tornar invis√≠vel e atacar por tr√°s.",
        stats: { attack: 92, defense: 78, speed: 98 },
        abilities: ["Camuflagem Digital", "Shuriken Laser", "Teletransporte"]
    },
    {
        id: 3,
        name: "QUANTUM MAGE",
        emoji: "üßô",
        description: "Manipulador da realidade qu√¢ntica com poderes elementais devastadores. Controla as for√ßas fundamentais do universo para destruir inimigos.",
        stats: { attack: 97, defense: 82, speed: 85 },
        abilities: ["Bola de Energia", "Telecinese", "Portal Dimensional"]
    },
    {
        id: 4,
        name: "STEEL SAMURAI",
        emoji: "‚öîÔ∏è",
        description: "Guerreiro com l√¢mina de a√ßo e honra inabal√°vel. Combina t√©cnicas tradicionais de samurai com tecnologia futurista.",
        stats: { attack: 90, defense: 95, speed: 80 },
        abilities: ["Corte Perfeito", "Escudo de A√ßo", "F√∫ria do Samurai"]
    },
    {
        id: 5,
        name: "VOID ASSASSIN",
        emoji: "üëª",
        description: "Assassino das trevas que se move entre dimens√µes. Especialista em eliminar alvos sem deixar vest√≠gios.",
        stats: { attack: 98, defense: 75, speed: 95 },
        abilities: ["Passo das Sombras", "L√¢mina do Vazio", "Invisibilidade"]
    },
    {
        id: 6,
        name: "PLASMA KNIGHT",
        emoji: "üõ°Ô∏è",
        description: "Cavaleiro energizado com escudo de plasma puro. Defensor implac√°vel que protege aliados com barreiras de energia.",
        stats: { attack: 88, defense: 92, speed: 87 },
        abilities: ["Escudo de Plasma", "Martelo de Energia", "Prote√ß√£o de Equipe"]
    }
];

// Vari√°veis globais
let selectedPlayer = null;
let selectedEnemy = null;
let playerHealth = 100;
let enemyHealth = 100;
let battleLog = [];

// Elementos DOM
const background = document.getElementById('background');
const lightningContainer = document.getElementById('lightningContainer');
const character1 = document.getElementById('character1');
const character2 = document.getElementById('character2');
const laser1 = document.getElementById('laser1');
const laser2 = document.getElementById('laser2');
const charactersGrid = document.getElementById('charactersGrid');
const playNowBtn = document.getElementById('playNow');
const watchTrailerBtn = document.getElementById('watchTrailer');
const trailerModal = document.getElementById('trailerModal');
const closeTrailer = document.getElementById('closeTrailer');
const menuToggle = document.getElementById('menuToggle');
const navMenu = document.querySelector('nav ul');
const downloadModal = document.getElementById('downloadModal');
const closeDownload = document.getElementById('closeDownload');
const characterModal = document.getElementById('characterModal');
const closeCharacter = document.getElementById('closeCharacter');
const characterDetails = document.getElementById('characterDetails');
const startBattleBtn = document.getElementById('startBattle');
const playersOnline = document.getElementById('playersOnline');
const battlesToday = document.getElementById('battlesToday');
const winRate = document.getElementById('winRate');
const characterSelectionModal = document.getElementById('characterSelectionModal');
const closeSelection = document.getElementById('closeSelection');
const playerCharacter = document.getElementById('playerCharacter');
const enemyCharacter = document.getElementById('enemyCharacter');
const choosePlayerBtn = document.getElementById('choosePlayer');
const chooseEnemyBtn = document.getElementById('chooseEnemy');
const characterList = document.getElementById('characterList');
const confirmSelection = document.getElementById('confirmSelection');
const battleModal = document.getElementById('battleModal');
const closeBattle = document.getElementById('closeBattle');
const battlePlayer = document.getElementById('battlePlayer');
const battleEnemy = document.getElementById('battleEnemy');
const playerSprite = document.getElementById('playerSprite');
const enemySprite = document.getElementById('enemySprite');
const playerHealthBar = document.getElementById('playerHealth');
const enemyHealthBar = document.getElementById('enemyHealth');
const playerName = document.getElementById('playerName');
const enemyName = document.getElementById('enemyName');
const attackBtn = document.getElementById('attackBtn');
const specialBtn = document.getElementById('specialBtn');
const defendBtn = document.getElementById('defendBtn');
const battleLogDiv = document.getElementById('battleLog');

// Criar part√≠culas de fundo
function createBackgroundParticles() {
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.width = Math.random() * 100 + 50 + 'px';
        particle.style.height = particle.style.width;
        particle.style.left = Math.random() * 100 + '%';
        particle.style.top = Math.random() * 100 + 100 + '%';
        particle.style.animationDuration = Math.random() * 30 + 20 + 's';
        particle.style.animationDelay = Math.random() * 10 + 's';
        particle.style.opacity = Math.random() * 0.5 + 0.1;
        background.appendChild(particle);
    }
}

// Criar raios de energia
function createLightning() {
    setInterval(() => {
        const lightning = document.createElement('div');
        lightning.className = 'lightning';
        lightning.style.left = Math.random() * 100 + '%';
        lightning.style.top = Math.random() * 100 + '%';
        lightning.style.height = Math.random() * 200 + 50 + 'px';
        lightningContainer.appendChild(lightning);
        
        // Remover raio ap√≥s anima√ß√£o
        setTimeout(() => {
            if (lightning.parentNode) {
                lightning.parentNode.removeChild(lightning);
            }
        }, 100);
    }, 300);
}

// Anima√ß√£o dos personagens atirando
function animateCharacters() {
    setInterval(() => {
        // Personagem 1 atira
        laser1.style.left = '80px';
        laser1.style.top = '60px';
        laser1.style.display = 'block';
        
        setTimeout(() => {
            laser1.style.display = 'none';
        }, 500);
    }, 2000);

    setInterval(() => {
        // Personagem 2 atira
        laser2.style.left = '-200px';
        laser2.style.top = '60px';
        laser2.style.display = 'block';
        
        setTimeout(() => {
            laser2.style.display = 'none';
        }, 500);
    }, 3000);
}

// Renderizar personagens
function renderCharacters() {
    charactersGrid.innerHTML = '';
    characters.forEach(character => {
        const card = document.createElement('article');
        card.className = 'character-card';
        card.innerHTML = `
            <div class="character-image">${character.emoji}</div>
            <h3 class="character-name">${character.name}</h3>
            <p class="character-description">${character.description.substring(0, 100)}...</p>
            <div class="character-stats">
                <div class="stat">
                    <div class="stat-value">${character.stats.attack}</div>
                    <div class="stat-label">ATAQUE</div>
                </div>
                <div class="stat">
                    <div class="stat-value">${character.stats.defense}</div>
                    <div class="stat-label">DEFESA</div>
                </div>
                <div class="stat">
                    <div class="stat-value">${character.stats.speed}</div>
                    <div class="stat-label">VELOCIDADE</div>
                </div>
            </div>
            <button class="play-btn" data-character="${character.id}">VER DETALHES</button>
        `;
        charactersGrid.appendChild(card);
    });

    // Adicionar eventos aos bot√µes de ver detalhes
    document.querySelectorAll('.play-btn').forEach(button => {
        button.addEventListener('click', function() {
            const characterId = parseInt(this.getAttribute('data-character'));
            showCharacterDetails(characterId);
        });
    });
}

// Mostrar detalhes do personagem
function showCharacterDetails(characterId) {
    const character = characters.find(c => c.id === characterId);
    if (character) {
        characterDetails.innerHTML = `
            <div class="character-detail-image">${character.emoji}</div>
            <h2 class="character-detail-name">${character.name}</h2>
            <p class="character-detail-description">${character.description}</p>
            <div class="character-detail-stats">
                <div class="stat-bar-container">
                    <div class="stat-bar-label">ATAQUE</div>
                    <div class="stat-bar">
                        <div class="stat-bar-fill stat-attack-fill" style="height: ${character.stats.attack}%;"></div>
                    </div>
                    <div class="stat-value">${character.stats.attack}</div>
                </div>
                <div class="stat-bar-container">
                    <div class="stat-bar-label">DEFESA</div>
                    <div class="stat-bar">
                        <div class="stat-bar-fill stat-defense-fill" style="height: ${character.stats.defense}%;"></div>
                    </div>
                    <div class="stat-value">${character.stats.defense}</div>
                </div>
                <div class="stat-bar-container">
                    <div class="stat-bar-label">VELOCIDADE</div>
                    <div class="stat-bar">
                        <div class="stat-bar-fill stat-speed-fill" style="height: ${character.stats.speed}%;"></div>
                    </div>
                    <div class="stat-value">${character.stats.speed}</div>
                </div>
            </div>
            <button class="hero-btn primary" onclick="selectCharacter(${character.id})">SELECIONAR PERSONAGEM</button>
        `;
        characterModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    }
}

// Selecionar personagem (abre modal de sele√ß√£o)
function selectCharacter(characterId) {
    characterModal.style.display = 'none';
    characterSelectionModal.style.display = 'block';
    document.body.style.overflow = 'hidden';
    renderCharacterSelection();
}

// Renderizar sele√ß√£o de personagens
function renderCharacterSelection() {
    characterList.innerHTML = '';
    characters.forEach(character => {
        const option = document.createElement('div');
        option.className = 'character-option';
        option.innerHTML = character.emoji;
        option.setAttribute('data-character', character.id);
        option.addEventListener('click', () => selectCharacterForBattle(character.id, option));
        characterList.appendChild(option);
    });
}

// Selecionar personagem para batalha
function selectCharacterForBattle(characterId, element) {
    const character = characters.find(c => c.id === characterId);
    if (!character) return;

    // Remover sele√ß√£o anterior
    document.querySelectorAll('.character-option').forEach(opt => {
        opt.classList.remove('selected');
    });

    // Adicionar sele√ß√£o atual
    element.classList.add('selected');

    // Determinar se √© jogador ou inimigo
    if (document.activeElement === choosePlayerBtn || document.activeElement === chooseEnemyBtn) {
        if (document.activeElement === choosePlayerBtn) {
            selectedPlayer = character;
            playerCharacter.innerHTML = `<div class="character-sprite">${character.emoji}</div>`;
            playerCharacter.classList.add('selected');
        } else {
            selectedEnemy = character;
            enemyCharacter.innerHTML = `<div class="character-sprite">${character.emoji}</div>`;
            enemyCharacter.classList.add('selected');
        }
    } else {
        // Se nenhum bot√£o foi clicado, assumir que √© o jogador
        selectedPlayer = character;
        playerCharacter.innerHTML = `<div class="character-sprite">${character.emoji}</div>`;
        playerCharacter.classList.add('selected');
    }

    // Habilitar bot√£o de confirma√ß√£o se ambos estiverem selecionados
    if (selectedPlayer && selectedEnemy) {
        confirmSelection.disabled = false;
    }
}

// Setup dos bot√µes de escolha
function setupChooseButtons() {
    choosePlayerBtn.addEventListener('click', () => {
        choosePlayerBtn.classList.add('active');
        chooseEnemyBtn.classList.remove('active');
    });

    chooseEnemyBtn.addEventListener('click', () => {
        chooseEnemyBtn.classList.add('active');
        choosePlayerBtn.classList.remove('active');
    });
}

// Confirmar sele√ß√£o de personagens
function confirmCharacterSelection() {
    if (selectedPlayer && selectedEnemy) {
        characterSelectionModal.style.display = 'none';
        alert(`Personagens selecionados!\nJogador: ${selectedPlayer.name}\nInimigo: ${selectedEnemy.name}\nClique em "Iniciar Batalha" para come√ßar!`);
    } else {
        alert('Por favor, selecione ambos os personagens!');
    }
}

// Manipula√ß√£o do modal de trailer
function setupTrailerModal() {
    watchTrailerBtn.addEventListener('click', () => {
        trailerModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    });

    closeTrailer.addEventListener('click', () => {
        trailerModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    });

    window.addEventListener('click', (event) => {
        if (event.target === trailerModal) {
            trailerModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });
}

// Manipula√ß√£o do modal de download
function setupDownloadModal() {
    playNowBtn.addEventListener('click', () => {
        downloadModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    });

    closeDownload.addEventListener('click', () => {
        downloadModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    });

    window.addEventListener('click', (event) => {
        if (event.target === downloadModal) {
            downloadModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });

    // Adicionar eventos aos bot√µes de download
    document.querySelectorAll('.download-option button').forEach(button => {
        button.addEventListener('click', function() {
            const platform = this.closest('.download-option').querySelector('h3').textContent;
            alert(`Iniciando download para ${platform}...`);
            downloadModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });
    });
}

// Manipula√ß√£o do modal de personagem
function setupCharacterModal() {
    closeCharacter.addEventListener('click', () => {
        characterModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    });

    window.addEventListener('click', (event) => {
        if (event.target === characterModal) {
            characterModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });
}

// Manipula√ß√£o do modal de sele√ß√£o
function setupSelectionModal() {
    closeSelection.addEventListener('click', () => {
        characterSelectionModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    });

    window.addEventListener('click', (event) => {
        if (event.target === characterSelectionModal) {
            characterSelectionModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });

    confirmSelection.addEventListener('click', confirmCharacterSelection);
}

// Menu responsivo
function setupMobileMenu() {
    menuToggle.addEventListener('click', () => {
        navMenu.classList.toggle('active');
    });

    // Fechar menu ao clicar em um link
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', () => {
            navMenu.classList.remove('active');
        });
    });
}

// Smooth scroll para navega√ß√£o
function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

// Efeitos de hover
function setupHoverEffects() {
    // Bot√µes
    const buttons = document.querySelectorAll('.hero-btn, .play-btn');
    buttons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-5px) scale(1.05)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });

    // Cards
    const cards = document.querySelectorAll('.character-card, .feature-card, .download-option');
    cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
}

// Anima√ß√£o de entrada
function animateEntrance() {
    const elements = document.querySelectorAll('.hero-section, .features-section, .characters-section, .battle-section');
    elements.forEach((element, index) => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            element.style.transition = 'all 0.5s ease';
            element.style.opacity = '1';
            element.style.transform = 'translateY(0)';
        }, 300 + (index * 200));
    });
}

// Parallax effect
function setupParallax() {
    window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset;
        const rate = scrolled * -0.5;
        const heroSection = document.querySelector('.hero-section');
        if (heroSection) {
            heroSection.style.transform = `translateY(${rate}px)`;
        }
    });
}

// Anima√ß√£o de contagem para stats
function animateStats() {
    const statElements = [
        { element: playersOnline, target: 50000, suffix: '+' },
        { element: battlesToday, target: 1000000, suffix: '+' },
        { element: winRate, target: 65, suffix: '%' }
    ];

    statElements.forEach(stat => {
        let currentValue = 0;
        const duration = 2000;
        const increment = stat.target / (duration / 16);
        
        const timer = setInterval(() => {
            currentValue += increment;
            if (currentValue >= stat.target) {
                currentValue = stat.target;
                clearInterval(timer);
            }
            stat.element.textContent = Math.floor(currentValue).toLocaleString() + stat.suffix;
        }, 16);
    });
}

// Fun√ß√£o para iniciar batalha
function setupBattleButton() {
    startBattleBtn.addEventListener('click', () => {
        if (selectedPlayer && selectedEnemy) {
            startBattle();
        } else {
            alert('Por favor, selecione seus personagens primeiro!');
            characterSelectionModal.style.display = 'block';
            document.body.style.overflow = 'hidden';
            renderCharacterSelection();
        }
    });
}

// Iniciar batalha
function startBattle() {
    battleModal.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    // Resetar estado da batalha
    playerHealth = 100;
    enemyHealth = 100;
    battleLog = [];
    
    // Atualizar interface
    playerSprite.textContent = selectedPlayer.emoji;
    enemySprite.textContent = selectedEnemy.emoji;
    playerName.textContent = selectedPlayer.name;
    enemyName.textContent = selectedEnemy.name;
    updateHealthBars();
    
    // Limpar log
    battleLogDiv.innerHTML = '<p>Batalha iniciada! Escolha sua a√ß√£o.</p>';
    
    // Adicionar mensagem inicial
    addToBattleLog(`${selectedPlayer.name} enfrenta ${selectedEnemy.name}!`);
}

// Atualizar barras de vida
function updateHealthBars() {
    playerHealthBar.style.width = `${playerHealth}%`;
    enemyHealthBar.style.width = `${enemyHealth}%`;
    
    // Mudar cor da barra conforme a vida
    if (playerHealth < 30) {
        playerHealthBar.style.background = 'linear-gradient(to right, #ff416c, #ff4b2b)';
    } else if (playerHealth < 60) {
        playerHealthBar.style.background = 'linear-gradient(to right, #ff8c00, #ffa500)';
    } else {
        playerHealthBar.style.background = 'linear-gradient(to right, #00ff88, #00ffff)';
    }
    
    if (enemyHealth < 30) {
        enemyHealthBar.style.background = 'linear-gradient(to right, #ff416c, #ff4b2b)';
    } else if (enemyHealth < 60) {
        enemyHealthBar.style.background = 'linear-gradient(to right, #ff8c00, #ffa500)';
    } else {
        enemyHealthBar.style.background = 'linear-gradient(to right, #ff416c, #ff4b2b)';
    }
}

// Adicionar mensagem ao log da batalha
function addToBattleLog(message) {
    const logEntry = document.createElement('p');
    logEntry.textContent = message;
    battleLogDiv.appendChild(logEntry);
    battleLogDiv.scrollTop = battleLogDiv.scrollHeight;
}

// Ataque do jogador
function playerAttack() {
    if (playerHealth <= 0 || enemyHealth <= 0) return;
    
    const damage = Math.floor(Math.random() * 20) + 10;
    enemyHealth = Math.max(0, enemyHealth - damage);
    updateHealthBars();
    
    addToBattleLog(`${selectedPlayer.name} ataca e causa ${damage} de dano!`);
    
    // Verificar vit√≥ria
    if (enemyHealth <= 0) {
        addToBattleLog(`${selectedPlayer.name} vence a batalha!`);
        setTimeout(() => {
            alert(`${selectedPlayer.name} venceu a batalha!`);
        }, 1000);
        return;
    }
    
    // Turno do inimigo
    setTimeout(enemyTurn, 1000);
}

// Habilidade especial do jogador
function playerSpecial() {
    if (playerHealth <= 0 || enemyHealth <= 0) return;
    
    const damage = Math.floor(Math.random() * 30) + 20;
    enemyHealth = Math.max(0, enemyHealth - damage);
    updateHealthBars();
    
    addToBattleLog(`${selectedPlayer.name} usa habilidade especial e causa ${damage} de dano!`);
    
    // Verificar vit√≥ria
    if (enemyHealth <= 0) {
        addToBattleLog(`${selectedPlayer.name} vence a batalha com uma habilidade especial!`);
        setTimeout(() => {
            alert(`${selectedPlayer.name} venceu a batalha!`);
        }, 1000);
        return;
    }
    
    // Turno do inimigo
    setTimeout(enemyTurn, 1000);
}

// Defesa do jogador
function playerDefend() {
    if (playerHealth <= 0 || enemyHealth <= 0) return;
    
    addToBattleLog(`${selectedPlayer.name} se defende!`);
    
    // Reduzir dano do pr√≥ximo ataque
    setTimeout(() => {
        const damage = Math.floor(Math.random() * 15) + 5;
        playerHealth = Math.max(0, playerHealth - damage);
        updateHealthBars();
        
        addToBattleLog(`${selectedEnemy.name} ataca, mas o dano √© reduzido para ${damage}!`);
        
        // Verificar derrota
        if (playerHealth <= 0) {
            addToBattleLog(`${selectedEnemy.name} vence a batalha!`);
            setTimeout(() => {
                alert(`${selectedEnemy.name} venceu a batalha!`);
            }, 1000);
        }
    }, 1000);
}

// Turno do inimigo
function enemyTurn() {
    if (playerHealth <= 0 || enemyHealth <= 0) return;
    
    const actions = ['attack', 'special', 'defend'];
    const action = actions[Math.floor(Math.random() * actions.length)];
    
    switch (action) {
        case 'attack':
            const damage = Math.floor(Math.random() * 20) + 10;
            playerHealth = Math.max(0, playerHealth - damage);
            updateHealthBars();
            
            addToBattleLog(`${selectedEnemy.name} ataca e causa ${damage} de dano!`);
            
            // Verificar derrota
            if (playerHealth <= 0) {
                addToBattleLog(`${selectedEnemy.name} vence a batalha!`);
                setTimeout(() => {
                    alert(`${selectedEnemy.name} venceu a batalha!`);
                }, 1000);
            }
            break;
            
        case 'special':
            const specialDamage = Math.floor(Math.random() * 30) + 20;
            playerHealth = Math.max(0, playerHealth - specialDamage);
            updateHealthBars();
            
            addToBattleLog(`${selectedEnemy.name} usa habilidade especial e causa ${specialDamage} de dano!`);
            
            // Verificar derrota
            if (playerHealth <= 0) {
                addToBattleLog(`${selectedEnemy.name} vence a batalha com uma habilidade especial!`);
                setTimeout(() => {
                    alert(`${selectedEnemy.name} venceu a batalha!`);
                }, 1000);
            }
            break;
            
        case 'defend':
            addToBattleLog(`${selectedEnemy.name} se defende!`);
            break;
    }
}

// Setup dos bot√µes de batalha
function setupBattleButtons() {
    attackBtn.addEventListener('click', playerAttack);
    specialBtn.addEventListener('click', playerSpecial);
    defendBtn.addEventListener('click', playerDefend);
    
    closeBattle.addEventListener('click', () => {
        battleModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    });

    window.addEventListener('click', (event) => {
        if (event.target === battleModal) {
            battleModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });
}

// Fun√ß√£o para simular download
function setupDownloadButtons() {
    document.querySelectorAll('.download-option button').forEach(button => {
        button.addEventListener('click', function() {
            const platform = this.closest('.download-option').querySelector('h3').textContent;
            showDownloadAnimation(platform);
        });
    });
}

// Anima√ß√£o de download
function showDownloadAnimation(platform) {
    const button = event.target;
    const originalText = button.textContent;
    button.textContent = 'BAIXANDO...';
    button.disabled = true;
    
    // Simular progresso do download
    let progress = 0;
    const interval = setInterval(() => {
        progress += 5;
        if (progress >= 100) {
            clearInterval(interval);
            button.textContent = 'INSTALAR';
            button.onclick = () => {
                alert(`Instala√ß√£o de ${platform} conclu√≠da!`);
            };
        }
    }, 100);
}

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', () => {
    createBackgroundParticles();
    createLightning();
    animateCharacters();
    renderCharacters();
    setupTrailerModal();
    setupDownloadModal();
    setupCharacterModal();
    setupSelectionModal();
    setupMobileMenu();
    setupSmoothScroll();
    setupHoverEffects();
    animateEntrance();
    setupParallax();
    animateStats();
    setupBattleButton();
    setupBattleButtons();
    setupDownloadButtons();
    setupChooseButtons();
    
    // Adicionar classe de anima√ß√£o ao body
    document.body.style.opacity = '0';
    document.body.style.transform = 'translateY(20px)';
    setTimeout(() => {
        document.body.style.transition = 'all 0.5s ease';
        document.body.style.opacity = '1';
        document.body.style.transform = 'translateY(0)';
    }, 100);
});

// Evento para quando a janela √© redimensionada
window.addEventListener('resize', () => {
    if (window.innerWidth > 768) {
        navMenu.classList.remove('active');
    }
});

// Fun√ß√µes globais para serem acessadas pelo HTML
window.selectCharacter = selectCharacter;


csss


/* Reset e Configura√ß√µes B√°sicas */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    background: linear-gradient(135deg, #0a0a2a, #1a1a4a, #2a0a4a);
    color: #fff;
    min-height: 100vh;
    overflow-x: hidden;
    position: relative;
    font-family: 'Exo 2', 'Arial', sans-serif;
    line-height: 1.6;
}

/* Anima√ß√µes de fundo */
.background-animation {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
}

.particle {
    position: absolute;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(0, 255, 255, 0.8), transparent);
    animation: float 15s infinite linear;
}

@keyframes float {
    0% {
        transform: translateY(0) translateX(0) rotate(0deg);
        opacity: 0;
    }
    10% {
        opacity: 1;
    }
    90% {
        opacity: 1;
    }
    100% {
        transform: translateY(-100vh) translateX(100px) rotate(360deg);
        opacity: 0;
    }
}

.grid-lines {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
        linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px),
        linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 50px 50px;
    animation: grid-move 20s linear infinite;
    z-index: -1;
}

@keyframes grid-move {
    0% {
        transform: translate(0, 0);
    }
    100% {
        transform: translate(50px, 50px);
    }
}

/* Raios de energia */
.lightning-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: -1;
}

.lightning {
    position: absolute;
    background: linear-gradient(to bottom, #00ffff, #0088ff, #00ffff);
    width: 2px;
    height: 100px;
    box-shadow: 0 0 10px #00ffff, 0 0 20px #0088ff;
    animation: lightning-bolt 0.1s infinite alternate;
}

@keyframes lightning-bolt {
    0% {
        opacity: 0.3;
        transform: scaleY(1);
    }
    100% {
        opacity: 0.8;
        transform: scaleY(1.2);
    }
}

/* Personagens atirando */
.battle-arena {
    position: fixed;
    bottom: 50px;
    left: 0;
    width: 100%;
    height: 200px;
    pointer-events: none;
    z-index: 10;
}

.character {
    position: absolute;
    bottom: 0;
    width: 80px;
    height: 120px;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: bottom;
}

.character-1 {
    left: 10%;
    background-image: url('image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 150"><rect x="30" y="50" width="40" height="80" fill="%2300aaff"/><circle cx="50" cy="40" r="20" fill="%2300aaff"/><rect x="20" y="60" width="60" height="20" fill="%230088ff"/><rect x="40" y="30" width="20" height="20" fill="%230088ff"/></svg>');
}

.character-2 {
    right: 10%;
    background-image: url('image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 150"><rect x="30" y="50" width="40" height="80" fill="%23ff0080"/><circle cx="50" cy="40" r="20" fill="%23ff0080"/><rect x="20" y="60" width="60" height="20" fill="%23ff0060"/><rect x="40" y="30" width="20" height="20" fill="%23ff0060"/></svg>');
    transform: scaleX(-1);
}

.laser-beam {
    position: absolute;
    height: 4px;
    background: linear-gradient(to right, transparent, #00ffff, #0088ff, transparent);
    box-shadow: 0 0 10px #00ffff;
    animation: laser-fire 0.5s infinite;
}

@keyframes laser-fire {
    0% {
        width: 0;
        opacity: 0;
    }
    50% {
        opacity: 1;
    }
    100% {
        width: 200px;
        opacity: 0;
    }
}

/* Header */
header {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid rgba(0, 255, 255, 0.3);
    position: relative;
    z-index: 100;
    flex-wrap: wrap;
}

.logo {
    font-size: 2rem;
    font-weight: bold;
    background: linear-gradient(45deg, #00ffff, #00ff88);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
    letter-spacing: 2px;
    font-family: 'Orbitron', sans-serif;
}

nav ul {
    display: flex;
    list-style: none;
    gap: 2rem;
}

nav a {
    color: #fff;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    position: relative;
    overflow: hidden;
    font-family: 'Orbitron', sans-serif;
}

nav a:hover {
    background: rgba(0, 255, 255, 0.2);
    transform: translateY(-2px);
}

nav a::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: 0.5s;
}

nav a:hover::before {
    left: 100%;
}

.menu-toggle {
    display: none;
    font-size: 2rem;
    cursor: pointer;
}

/* Main Content */
.container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 2rem;
}

/* Hero Section */
.hero-section {
    text-align: center;
    margin-bottom: 3rem;
    padding: 3rem 2rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 20px;
    border: 1px solid rgba(0, 255, 255, 0.2);
    position: relative;
    overflow: hidden;
}

.hero-section::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(0, 255, 255, 0.1) 0%, transparent 70%);
    animation: hero-pulse 4s ease-in-out infinite alternate;
}

@keyframes hero-pulse {
    0% {
        transform: scale(1);
    }
    100% {
        transform: scale(1.1);
    }
}

.game-title {
    font-size: 4rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #00ffff, #ff00ff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
    letter-spacing: 3px;
    font-family: 'Orbitron', sans-serif;
    font-weight: 900;
}

.game-subtitle {
    font-size: 1.5rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 2rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
    font-weight: 300;
}

.hero-buttons {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-top: 2rem;
}

.hero-btn {
    padding: 1rem 2.5rem;
    border: none;
    border-radius: 30px;
    font-size: 1.1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    font-family: 'Orbitron', sans-serif;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.hero-btn.primary {
    background: linear-gradient(45deg, #00ffff, #00ff88);
    color: #000;
}

.hero-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border: 2px solid rgba(0, 255, 255, 0.5);
}

.hero-btn:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow: 0 10px 30px rgba(0, 255, 255, 0.4);
}

.hero-btn:active {
    transform: translateY(0) scale(0.98);
}

/* Features */
.features-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
}

.feature-card {
    background: rgba(0, 0, 0, 0.5);
    border-radius: 15px;
    padding: 2rem;
    text-align: center;
    border: 1px solid rgba(0, 255, 255, 0.2);
    transition: all 0.3s ease;
}

.feature-card:hover {
    transform: translateY(-10px);
    border-color: rgba(0, 255, 255, 0.5);
    box-shadow: 0 10px 30px rgba(0, 255, 255, 0.3);
}

.feature-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #00ffff, #00ff88);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.feature-title {
    font-size: 1.5rem;
    color: #00ffff;
    margin-bottom: 1rem;
    font-family: 'Orbitron', sans-serif;
}

.feature-description {
    color: rgba(255, 255, 255, 0.7);
    line-height: 1.6;
}

/* Personagens */
.characters-section {
    margin-bottom: 3rem;
}

.section-title {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    color: #00ffff;
    text-align: center;
    text-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
    font-family: 'Orbitron', sans-serif;
    font-weight: 700;
}

.characters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
}

.character-card {
    background: linear-gradient(145deg, #1a1a2e, #16213e);
    border-radius: 15px;
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s ease;
    border: 1px solid rgba(0, 255, 255, 0.2);
    position: relative;
    overflow: hidden;
}

.character-card:hover {
    transform: translateY(-10px) scale(1.05);
    box-shadow: 0 10px 30px rgba(0, 255, 255, 0.3);
    border-color: rgba(0, 255, 255, 0.5);
}

.character-image {
    width: 150px;
    height: 150px;
    margin: 0 auto 1rem;
    border-radius: 50%;
    background: linear-gradient(45deg, #ff0080, #00ffff);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(0, 255, 255, 0.7);
    }
    70% {
        box-shadow: 0 0 0 20px rgba(0, 255, 255, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(0, 255, 255, 0);
    }
}

.character-name {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: #00ffff;
    font-family: 'Orbitron', sans-serif;
}

.character-description {
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

.character-stats {
    display: flex;
    justify-content: space-around;
    margin-bottom: 1rem;
}

.stat {
    text-align: center;
}

.stat-value {
    font-size: 1.2rem;
    font-weight: bold;
    color: #00ffff;
    font-family: 'Orbitron', sans-serif;
}

.stat-label {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.6);
}

.play-btn {
    background: linear-gradient(45deg, #00ffff, #00ff88);
    color: #000;
    border: none;
    padding: 0.8rem 2rem;
    border-radius: 25px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: 'Orbitron', sans-serif;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.play-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.8);
}

/* Se√ß√£o de Batalha */
.battle-section {
    margin-bottom: 3rem;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 20px;
    padding: 2rem;
    border: 1px solid rgba(0, 255, 255, 0.2);
}

.battle-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: center;
}

.battle-info h3 {
    font-size: 1.8rem;
    color: #00ffff;
    margin-bottom: 1rem;
    font-family: 'Orbitron', sans-serif;
}

.battle-info p {
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 2rem;
    line-height: 1.6;
}

.battle-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 2rem;
}

.stat-item {
    text-align: center;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    border: 1px solid rgba(0, 255, 255, 0.2);
}

.stat-number {
    font-size: 1.5rem;
    font-weight: bold;
    color: #00ffff;
    font-family: 'Orbitron', sans-serif;
    display: block;
}

.stat-label {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.7);
}

.battle-preview {
    text-align: center;
}

.battle-arena-preview {
    background: linear-gradient(145deg, #1a1a2e, #16213e);
    border-radius: 15px;
    padding: 2rem;
    border: 1px solid rgba(0, 255, 255, 0.2);
    position: relative;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: space-around;
}

.player-character, .enemy-character {
    font-size: 4rem;
    animation: float 3s ease-in-out infinite;
}

.vs {
    font-size: 2rem;
    font-weight: bold;
    color: #ff0080;
    font-family: 'Orbitron', sans-serif;
}

@keyframes float {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-20px);
    }
}

/* Modais */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.modal-content {
    background: linear-gradient(145deg, #1a1a2e, #16213e);
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #00ffff;
    border-radius: 15px;
    width: 80%;
    max-width: 800px;
    position: relative;
    animation: slideIn 0.3s ease;
}

@keyframes slideIn {
    from { transform: translateY(-50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    right: 15px;
    top: 15px;
    transition: all 0.3s ease;
}

.close:hover {
    color: #00ffff;
    transform: rotate(90deg);
}

.video-placeholder {
    background: linear-gradient(45deg, #1a1a2e, #16213e);
    border-radius: 10px;
    padding: 40px;
    margin: 20px 0;
    border: 1px solid rgba(0, 255, 255, 0.3);
    text-align: center;
}

.video-icon {
    font-size: 4rem;
    margin-bottom: 20px;
    color: #00ffff;
    animation: pulse 2s infinite;
}

.video-placeholder h3 {
    color: #00ffff;
    margin-bottom: 1rem;
    font-family: 'Orbitron', sans-serif;
}

/* Modal de Download */
.download-modal {
    max-width: 900px;
}

.download-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.download-option {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 15px;
    padding: 2rem;
    text-align: center;
    border: 1px solid rgba(0, 255, 255, 0.2);
    transition: all 0.3s ease;
}

.download-option:hover {
    transform: translateY(-10px);
    border-color: rgba(0, 255, 255, 0.5);
    box-shadow: 0 10px 30px rgba(0, 255, 255, 0.3);
}

.platform-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
}

.download-option h3 {
    color: #00ffff;
    margin-bottom: 0.5rem;
    font-family: 'Orbitron', sans-serif;
}

.download-option p {
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 1rem;
}

/* Modal de Personagem */
.character-modal {
    max-width: 600px;
}

.character-details {
    text-align: center;
    padding: 2rem;
}

.character-detail-image {
    width: 200px;
    height: 200px;
    margin: 0 auto 1rem;
    border-radius: 50%;
    background: linear-gradient(45deg, #ff0080, #00ffff);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 4rem;
    animation: pulse 2s infinite;
}

.character-detail-name {
    font-size: 2rem;
    color: #00ffff;
    margin-bottom: 1rem;
    font-family: 'Orbitron', sans-serif;
}

.character-detail-description {
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 2rem;
    line-height: 1.6;
}

.character-detail-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 2rem;
}

.stat-bar-container {
    text-align: center;
}

.stat-bar-label {
    color: #00ffff;
    margin-bottom: 0.5rem;
    font-family: 'Orbitron', sans-serif;
}

.stat-bar {
    width: 30px;
    height: 150px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    margin: 0 auto;
    position: relative;
    overflow: hidden;
}

.stat-bar-fill {
    position: absolute;
    bottom: 0;
    width: 100%;
    border-radius: 15px;
    transition: height 1s ease;
}

.stat-attack-fill { background: linear-gradient(to top, #ff416c, #ff4b2b); }
.stat-defense-fill { background: linear-gradient(to top, #2193b0, #6dd5ed); }
.stat-speed-fill { background: linear-gradient(to top, #834d9b, #d04ed6); }

/* Modal de Sele√ß√£o de Personagem */
.selection-modal {
    max-width: 900px;
}

.selection-content {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 2rem;
    align-items: center;
    margin: 2rem 0;
}

.character-selection {
    text-align: center;
}

.character-selection h3 {
    color: #00ffff;
    margin-bottom: 1rem;
    font-family: 'Orbitron', sans-serif;
}

.selected-character {
    width: 120px;
    height: 120px;
    margin: 0 auto 1rem;
    border-radius: 50%;
    background: linear-gradient(45deg, #1a1a2e, #16213e);
    border: 2px dashed rgba(0, 255, 255, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    transition: all 0.3s ease;
}

.selected-character.selected {
    border: 2px solid #00ffff;
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
}

.placeholder {
    color: rgba(255, 255, 255, 0.3);
    font-size: 0.9rem;
}

.vs-indicator {
    font-size: 2rem;
    font-weight: bold;
    color: #ff0080;
    font-family: 'Orbitron', sans-serif;
}

.character-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
    max-height: 300px;
    overflow-y: auto;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 10px;
}

.character-option {
    width: 80px;
    height: 80px;
    margin: 0 auto;
    border-radius: 50%;
    background: linear-gradient(45deg, #1a1a2e, #16213e);
    border: 2px solid rgba(0, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.character-option:hover {
    border-color: #00ffff;
    transform: scale(1.1);
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
}

.character-option.selected {
    border-color: #00ff88;
    box-shadow: 0 0 20px rgba(0, 255, 136, 0.7);
}

#confirmSelection {
    width: 100%;
    margin-top: 1rem;
}

/* Modal de Batalha */
.battle-modal {
    max-width: 900px;
}

.battle-arena-full {
    display: flex;
    justify-content: space-around;
    align-items: center;
    margin: 2rem 0;
    padding: 2rem;
    background: linear-gradient(145deg, #0a0a2a, #1a1a4a);
    border-radius: 15px;
    border: 1px solid rgba(0, 255, 255, 0.2);
    position: relative;
    min-height: 300px;
}

.battle-character {
    text-align: center;
    width: 150px;
}

.character-sprite {
    font-size: 4rem;
    margin-bottom: 1rem;
    animation: float 3s ease-in-out infinite;
}

.health-bar {
    width: 100%;
    height: 20px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    margin-bottom: 1rem;
    overflow: hidden;
}

.health-fill {
    height: 100%;
    border-radius: 10px;
    transition: width 0.5s ease;
}

.player .health-fill {
    background: linear-gradient(to right, #00ff88, #00ffff);
}

.enemy .health-fill {
    background: linear-gradient(to right, #ff416c, #ff4b2b);
}

.character-name {
    color: #00ffff;
    font-family: 'Orbitron', sans-serif;
    font-size: 1.2rem;
}

.battle-vs {
    font-size: 2rem;
    font-weight: bold;
    color: #ff0080;
    font-family: 'Orbitron', sans-serif;
}

.battle-controls {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin: 2rem 0;
    flex-wrap: wrap;
}

.battle-log {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    padding: 1rem;
    height: 150px;
    overflow-y: auto;
    border: 1px solid rgba(0, 255, 255, 0.2);
}

.battle-log p {
    margin-bottom: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Footer */
footer {
    text-align: center;
    padding: 2rem;
    background: rgba(0, 0, 0, 0.7);
    margin-top: 3rem;
    border-top: 1px solid rgba(0, 255, 255, 0.3);
}

.footer-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto 2rem;
    text-align: left;
}

.footer-section h3 {
    color: #00ffff;
    margin-bottom: 1rem;
    font-family: 'Orbitron', sans-serif;
}

.footer-section h4 {
    color: #00ffff;
    margin-bottom: 1rem;
    font-family: 'Orbitron', sans-serif;
}

.footer-section ul {
    list-style: none;
}

.footer-section li {
    margin-bottom: 0.5rem;
}

.footer-section a {
    color: rgba(255, 255, 255, 0.7);
    text-decoration: none;
    transition: all 0.3s ease;
}

.footer-section a:hover {
    color: #00ffff;
    transform: translateX(5px);
}

.social-links {
    display: flex;
    gap: 1rem;
}

.social-link {
    color: #00ffff;
    font-size: 1.5rem;
    transition: all 0.3s ease;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.social-link:hover {
    background: rgba(0, 255, 255, 0.2);
    transform: translateY(-5px) scale(1.1);
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
}

.footer-bottom {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 1rem;
    color: rgba(255, 255, 255, 0.5);
}

/* Responsividade */
@media (max-width: 768px) {
    .game-title {
        font-size: 2.5rem;
    }
    
    .game-subtitle {
        font-size: 1.2rem;
    }
    
    .hero-buttons {
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
    
    nav ul {
        display: none;
        flex-direction: column;
        gap: 1rem;
        width: 100%;
        background: rgba(0, 0, 0, 0.9);
        position: absolute;
        top: 100%;
        left: 0;
        padding: 1rem;
        border-top: 1px solid rgba(0, 255, 255, 0.3);
    }
    
    nav ul.active {
        display: flex;
    }
    
    .menu-toggle {
        display: block;
    }
    
    .features-section {
        grid-template-columns: 1fr;
    }
    
    .container {
        padding: 0 1rem;
    }
    
    header {
        padding: 1rem;
    }
    
    .logo {
        font-size: 1.5rem;
    }
    
    .modal-content {
        width: 95%;
        margin: 25% auto;
    }
    
    .battle-content {
        grid-template-columns: 1fr;
        gap: 2rem;
    }
    
    .battle-stats {
        grid-template-columns: 1fr;
    }
    
    .download-options {
        grid-template-columns: 1fr;
    }
    
    .character-detail-stats {
        grid-template-columns: 1fr;
    }
    
    .selection-content {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .vs-indicator {
        display: none;
    }
    
    .battle-controls {
        flex-direction: column;
        align-items: center;
    }
    
    .battle-arena-full {
        flex-direction: column;
        gap: 2rem;
    }
}

@media (max-width: 480px) {
    .game-title {
        font-size: 2rem;
    }
    
    .section-title {
        font-size: 2rem;
    }
    
    .character-card {
        padding: 1rem;
    }
    
    .hero-btn {
        padding: 0.8rem 1.5rem;
        font-size: 1rem;
    }
    
    .footer-content {
        grid-template-columns: 1fr;
        text-align: center;
    }
    
    .social-links {
        justify-content: center;
    }
    
    .modal-content {
        padding: 15px;
    }
    
    .character-option {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
    }
}





HTML
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PvP Mobile - Jogo Futurista de Batalha</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Exo+2:wght@300;400;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <!-- Anima√ß√µes de fundo -->
    <div class="background-animation" id="background"></div>
    <div class="grid-lines"></div>
    <div class="lightning-container" id="lightningContainer"></div>

    <!-- Arena de batalha -->
    <div class="battle-arena" id="battleArena">
        <div class="character character-1" id="character1">
            <div class="laser-beam" id="laser1"></div>
        </div>
        <div class="character character-2" id="character2">
            <div class="laser-beam" id="laser2"></div>
        </div>
    </div>

    <!-- Header -->
    <header>
        <div class="logo">PvP MOBILE</div>
        <nav>
            <ul>
                <li><a href="#home" class="nav-link">Home</a></li>
                <li><a href="#characters" class="nav-link">Personagens</a></li>
                <li><a href="#battle" class="nav-link">Batalha</a></li>
                <li><a href="#ranking" class="nav-link">Ranking</a></li>
                <li><a href="#download" class="nav-link">Download</a></li>
            </ul>
        </nav>
        <div class="menu-toggle" id="menuToggle">‚ò∞</div>
    </header>

    <!-- Main Content -->
    <main class="container">
        <!-- Hero Section -->
        <section class="hero-section" id="home">
            <h1 class="game-title">BATALHA FUTURISTA</h1>
            <p class="game-subtitle">Entre em um mundo de combates √©picos onde tecnologia e habilidade se encontram. Escolha seu guerreiro e domine o campo de batalha!</p>
            <div class="hero-buttons">
                <button class="hero-btn primary" id="playNow">JOGAR AGORA</button>
                <button class="hero-btn secondary" id="watchTrailer">ASSISTIR TRAILER</button>
            </div>
        </section>

        <!-- Features -->
        <section class="features-section">
            <article class="feature-card">
                <div class="feature-icon">‚öîÔ∏è</div>
                <h3 class="feature-title">Combates Intensos</h3>
                <p class="feature-description">Batalhas PvP em tempo real com gr√°ficos de √∫ltima gera√ß√£o e f√≠sica realista.</p>
            </article>
            <article class="feature-card">
                <div class="feature-icon">ü§ñ</div>
                <h3 class="feature-title">Personagens √önicos</h3>
                <p class="feature-description">Mais de 50 personagens futuristas com habilidades especiais e armas avan√ßadas.</p>
            </article>
            <article class="feature-card">
                <div class="feature-icon">üèÜ</div>
                <h3 class="feature-title">Sistema de Ranking</h3>
                <p class="feature-description">Suba nas posi√ß√µes do ranking global e conquiste recompensas exclusivas.</p>
            </article>
        </section>

        <!-- Personagens -->
        <section class="characters-section" id="characters">
            <h2 class="section-title">ESCOLHA SEU GUERREIRO</h2>
            <div class="characters-grid" id="charactersGrid">
                <!-- Personagens ser√£o adicionados via JavaScript -->
            </div>
        </section>

        <!-- Se√ß√£o de Batalha -->
        <section class="battle-section" id="battle">
            <h2 class="section-title">ARENA DE BATALHA</h2>
            <div class="battle-content">
                <div class="battle-info">
                    <h3>Modo PvP Intenso</h3>
                    <p>Entre em combates 1v1 ou em equipes de at√© 5 jogadores. Use estrat√©gias, habilidades especiais e armas futuristas para derrotar seus oponentes.</p>
                    <div class="battle-stats">
                        <div class="stat-item">
                            <span class="stat-number" id="playersOnline">50,000+</span>
                            <span class="stat-label">Jogadores Online</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number" id="battlesToday">1,000,000+</span>
                            <span class="stat-label">Batalhas Hoje</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number" id="winRate">65%</span>
                            <span class="stat-label">Taxa de Vit√≥rias</span>
                        </div>
                    </div>
                    <button class="hero-btn primary" id="startBattle">INICIAR BATALHA</button>
                </div>
                <div class="battle-preview">
                    <div class="battle-arena-preview">
                        <div class="player-character">ü§ñ</div>
                        <div class="vs">VS</div>
                        <div class="enemy-character">üëæ</div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Modal de Trailer -->
        <div class="modal" id="trailerModal">
            <div class="modal-content">
                <span class="close" id="closeTrailer">&times;</span>
                <div class="video-placeholder">
                    <div class="video-icon">‚ñ∂Ô∏è</div>
                    <h3>Trailer do Jogo - PvP Mobile</h3>
                    <p>Assista ao trailer oficial e veja a a√ß√£o em primeira m√£o!</p>
                </div>
            </div>
        </div>

        <!-- Modal de Download -->
        <div class="modal" id="downloadModal">
            <div class="modal-content download-modal">
                <span class="close" id="closeDownload">&times;</span>
                <h2>Baixe PvP Mobile</h2>
                <div class="download-options">
                    <div class="download-option" id="androidDownload">
                        <div class="platform-icon">ü§ñ</div>
                        <h3>Android</h3>
                        <p>Dispon√≠vel na Google Play Store</p>
                        <button class="hero-btn primary">BAIXAR AGORA</button>
                    </div>
                    <div class="download-option" id="iosDownload">
                        <div class="platform-icon">üì±</div>
                        <h3>iOS</h3>
                        <p>Dispon√≠vel na App Store</p>
                        <button class="hero-btn primary">BAIXAR AGORA</button>
                    </div>
                    <div class="download-option" id="pcDownload">
                        <div class="platform-icon">üíª</div>
                        <h3>PC</h3>
                        <p>Vers√£o para Windows/Mac</p>
                        <button class="hero-btn primary">BAIXAR AGORA</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal de Personagem -->
        <div class="modal" id="characterModal">
            <div class="modal-content character-modal">
                <span class="close" id="closeCharacter">&times;</span>
                <div class="character-details" id="characterDetails">
                    <!-- Detalhes do personagem ser√£o adicionados via JavaScript -->
                </div>
            </div>
        </div>

        <!-- Modal de Sele√ß√£o de Personagem -->
        <div class="modal" id="characterSelectionModal">
            <div class="modal-content selection-modal">
                <span class="close" id="closeSelection">&times;</span>
                <h2>SELECIONE SEUS PERSONAGENS</h2>
                <div class="selection-content">
                    <div class="character-selection">
                        <h3>Seu Personagem</h3>
                        <div class="selected-character" id="playerCharacter">
                            <div class="placeholder">Selecione um personagem</div>
                        </div>
                        <button class="hero-btn secondary" id="choosePlayer">ESCOLHER</button>
                    </div>
                    <div class="vs-indicator">VS</div>
                    <div class="character-selection">
                        <h3>Personagem Inimigo</h3>
                        <div class="selected-character" id="enemyCharacter">
                            <div class="placeholder">Selecione um personagem</div>
                        </div>
                        <button class="hero-btn secondary" id="chooseEnemy">ESCOLHER</button>
                    </div>
                </div>
                <div class="character-list" id="characterList">
                    <!-- Lista de personagens para sele√ß√£o -->
                </div>
                <button class="hero-btn primary" id="confirmSelection" disabled>CONFIRMAR SELE√á√ÉO</button>
            </div>
        </div>

        <!-- Modal de Batalha -->
        <div class="modal" id="battleModal">
            <div class="modal-content battle-modal">
                <span class="close" id="closeBattle">&times;</span>
                <h2>ARENA DE BATALHA</h2>
                <div class="battle-arena-full">
                    <div class="battle-character player" id="battlePlayer">
                        <div class="character-sprite" id="playerSprite">ü§ñ</div>
                        <div class="health-bar">
                            <div class="health-fill" id="playerHealth"></div>
                        </div>
                        <div class="character-name" id="playerName">Personagem</div>
                    </div>
                    <div class="battle-vs">VS</div>
                    <div class="battle-character enemy" id="battleEnemy">
                        <div class="character-sprite" id="enemySprite">üëæ</div>
                        <div class="health-bar">
                            <div class="health-fill" id="enemyHealth"></div>
                        </div>
                        <div class="character-name" id="enemyName">Inimigo</div>
                    </div>
                </div>
                <div class="battle-controls">
                    <button class="hero-btn primary" id="attackBtn">ATACAR</button>
                    <button class="hero-btn secondary" id="specialBtn">HABILIDADE ESPECIAL</button>
                    <button class="hero-btn secondary" id="defendBtn">DEFENDER</button>
                </div>
                <div class="battle-log" id="battleLog">
                    <p>Bem-vindo √† batalha! Escolha sua a√ß√£o.</p>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>PvP Mobile</h3>
                <p>O jogo de batalha definitivo para dispositivos m√≥veis.</p>
            </div>
            <div class="footer-section">
                <h4>Links R√°pidos</h4>
                <ul>
                    <li><a href="#home" class="footer-link">Home</a></li>
                    <li><a href="#characters" class="footer-link">Personagens</a></li>
                    <li><a href="#battle" class="footer-link">Batalha</a></li>
                    <li><a href="#ranking" class="footer-link">Ranking</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>Social</h4>
                <div class="social-links">
                    <a href="#" class="social-link">üéÆ</a>
                    <a href="#" class="social-link">üì±</a>
                    <a href="#" class="social-link">üí¨</a>
                    <a href="#" class="social-link">üì¢</a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            <p>¬© 2023 PvP Mobile. Todos os direitos reservados.</p>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>